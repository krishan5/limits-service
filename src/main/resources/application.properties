#Properties file placed in git repo should match/start with the name of the application name 
spring.application.name=limits-service

#When we don't have config server running then keeping following line optional 
#Once config server will be available, limit service will talk to it automatically.
#Start spring-cloud-config-server first, then start limits-server so that it can detect it on startup.
#Once found it will fetch config from server and print following logs :
# Fetching config from server at : http://localhost:8888
# Located environment: name=limits-service, profiles=[default], label=null, version=8adc5c62e31b85be204d9c3a510382822326fa5c, state=null
#So, when we will hit "/limits-using-configuration" request, it will return values from config-server
spring.config.import=optional:configserver:http://localhost:8888

#Consider profile as environment of application like dev or qa environment
#On setting up this, profile value will be set to "dev" on startup and config server will fetch values from "limits-service-dev.properties"
#Don't forget to create files like "limits-service-dev.properties", "limits-service-qa.properties" where "limits-service" is application name
#and "dev" / "qa" is environment or profile name.
#As we can see, "dev" is set as active profile then config server will fetch "limits-service.minimum", "limits-service.maximum" values from 
#"limits-service-dev.properties" file.
spring.profiles.active=dev

#Use following property only when spring.profiles.active=dev doesn't work in setting profile's value to "dev" on startup
#spring.cloud.config.profile=dev

#In case you want to use different name for your property file then we can set that name here :
#spring.cloud.config.name=another-file-name

limits-service.minimum=2
limits-service.maximum=999